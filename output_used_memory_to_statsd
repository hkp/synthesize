#!/usr/bin/env bash
#
# Script to send all server's current processes' used memory to a StatsD server
# Written by: Harry Park
# Last Updated on: July 11, 2020
#----------------------------------------------------------------------

#/ Usage: output_used_memory_to_statsd

#TODO Possibly add some service lookup of the statsd server and
#     send that to the process_mem_to_statsd script instead of reading from ENV

# TODO make this an option to adjust
PARALLELISM=300
SLEEP_FOR=5

# Self path
SELF_FILE="$(basename "${BASH_SOURCE[0]}")" # File name
SELF_DIR="$(dirname "${BASH_SOURCE[0]}")" # Dir name, assumes process script is in same dir

# Log functions
readonly LOG_FILE="/tmp/${SELF_FILE}.log"
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

# Help message (extracted from script headers)
usage() { grep '^#/' "$0" | cut --characters=4-; exit 0; }
REGEX='(^|\W)(-h|--help)($|\W)'
if [[ "$*" =~ $REGEX ]]; then usage; fi

main(){

  # list the processes,
  # extract the pids and process names
  # send the 2 args to the script in parallel, order that processes run doesn't matter
  while true; do
    info "$SELF_FILE run on `date +'%Y%m%d %H%M %p'`"
    ps -e \
    | awk '{printf "%s %d\n", $4, $1}' \
    | xargs -n 2 -P $PARALLELISM ${SELF_DIR}/process_mem_to_statsd
    sleep $SLEEP_FOR
  done
  info "$SELF_FILE run on `date +'%Y%m%d %H%M %p'`complete"
}

main "@$"
